import {digest} from './sha512.js';

describe('SHA-512/256', () => {
  describe('Digest', () => {
    test('Empty string', () => {
      const result = digest(new TextEncoder().encode(''));
      expect(result).toStrictEqual(new Uint8Array([
        198, 114, 184, 209, 239, 86, 237, 40,
        171, 135, 195, 98, 44, 81, 20, 6,
        155, 221, 58, 215, 184, 249, 115, 116,
        152, 208, 192, 30, 206, 240, 150, 122
      ]));
    });
    test('Hello', () => {
      const result = digest(new TextEncoder().encode('Hello'));
      expect(result).toStrictEqual(new Uint8Array([
        126, 117, 177, 139, 136, 210, 203, 139,
        233, 91, 5, 236, 97, 30, 84, 226,
        70, 4, 8, 162, 220, 248, 88, 249,
        69, 104, 100, 70, 201, 208, 122, 172
      ]));
    });
    test('Algorand address public key', () => {
      const publicKey = new Uint8Array([
        16, 140, 159, 223, 200, 0, 123, 125,
        148, 114, 220, 175, 160, 139, 148, 112,
        28, 233, 174, 19, 199, 114, 174, 105,
        93, 13, 242, 245, 176, 190, 120, 246
      ]);
      const result = digest(publicKey);
      expect(result).toStrictEqual(new Uint8Array([
        4, 152, 68, 177, 155, 117, 222, 28,
        28, 91, 43, 18, 56, 149, 167, 25,
        217, 57, 158, 93, 3, 47, 188, 226,
        198, 53, 155, 27, 2, 193, 95, 109
      ]));
    });
    test('Large input', () => {
      const publicKey = new Uint8Array([
        16, 140, 159, 223, 200, 0, 123, 125,
        148, 114, 220, 175, 160, 139, 148, 112,
        28, 233, 174, 19, 199, 114, 174, 105,
        93, 13, 242, 245, 176, 190, 120, 246,
        16, 140, 159, 223, 200, 0, 123, 125,
        148, 114, 220, 175, 160, 139, 148, 112,
        28, 233, 174, 19, 199, 114, 174, 105,
        93, 13, 242, 245, 176, 190, 120, 246,
        16, 140, 159, 223, 200, 0, 123, 125,
        148, 114, 220, 175, 160, 139, 148, 112,
        28, 233, 174, 19, 199, 114, 174, 105,
        93, 13, 242, 245, 176, 190, 120, 246,
        16, 140, 159, 223, 200, 0, 123, 125,
        148, 114, 220, 175, 160, 139, 148, 112,
        28, 233, 174, 19, 199, 114, 174, 105,
        93, 13, 242, 245, 176, 190, 120, 246,
        16, 140, 159, 223, 200, 0, 123, 125,
        148, 114, 220, 175, 160, 139, 148, 112,
        28, 233, 174, 19, 199, 114, 174, 105,
        93, 13, 242, 245, 176, 190, 120, 246
      ]);
      const result = digest(publicKey);
      expect(result).toStrictEqual(new Uint8Array([
        46, 248, 11, 190, 233, 150, 51, 240,
        169, 12, 209, 194, 77, 130, 187, 185,
        5, 49, 212, 213, 89, 31, 44, 237,
        27, 141, 110, 110, 230, 216, 11, 37
      ]));
    });
  });
});